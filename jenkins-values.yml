
master:
  componentName: "jenkins-master"
  image: "jenkins/jenkins"
  tag: "lts"
  imagePullPolicy: "Always"
  imagePullSecretName:
  # Optionally configure lifetime for master-container
  lifecycle:
  #  postStart:
  #    exec:
  #      command:
  #      - "uname"
  #      - "-a"
  adminUser: "admin"
  # adminPassword: <defaults to random>

# secrets for Credentials configuration using JCasC
  containerEnv:
    - name: SECRETS
      value: /secrets/jenkins

  # List of plugins to be install during Jenkins master start
  installPlugins:
    - kubernetes:1.25.7
    - workflow-job:2.39
    - workflow-aggregator:2.6
    - credentials-binding:1.22
    - git:4.2.2
    - configuration-as-code:1.41

  # List of plugins to install in addition to those listed in master.installPlugins
  additionalPlugins:
    - slack:2.40
    - greenballs:1.15
    - thinBackup:1.9
    - github-pullrequest:0.2.8

  # Jenkins XML job configs to provision
  jobs: {}
  #  test: |-
  #    <<xml here>>

  # Below is the implementation of Jenkins Configuration as Code.  Add a key under configScripts for each configuration area,
  # where each corresponds to a plugin or section of the UI.  Each key (prior to | character) is just a label, and can be any value.
  # Keys are only used to give the section a meaningful name.  The only restriction is they may only contain RFC 1123 \ DNS label
  # characters: lowercase letters, numbers, and hyphens.  The keys become the name of a configuration yaml file on the master in
  # /var/jenkins_home/casc_configs (by default) and will be processed by the Configuration as Code Plugin.  The lines after each |
  # become the content of the configuration yaml file.  The first line after this is a JCasC root element, eg jenkins, credentials,
  # etc.  Best reference is https://<jenkins_url>/configuration-as-code/reference.  The example below creates a welcome message:
  JCasC:
    enabled: true
    defaultConfig: true
    configScripts:
      welcome-message: |
        jenkins:
          systemMessage: Welcome to our CI\CD server. This Jenkins is configured and managed 'as code'.
      credentials: |
        credentials:
            system:
              domainCredentials:
              - credentials:
                - basicSSHUserPrivateKey:
                    scope: GLOBAL
                    id: "github_ssh_private_key"
                    username: "ssh_key_for_github"
                    description: "github_ssh_private_key"
                    privateKeySource:
                      directEntry:
                        privateKey: "${github_ssh_private_key}"
                - file:
                    scope: GLOBAL
                    id: "kubeconfig"
                    fileName: "kubeconfig_dev.yaml"
                    secretBytes: "${base64:${readFile:${kubeconfig_dev_secret_file_path}}}" # secretBytes requires base64 encoded content # not finished yet!
                - string:
                    scope: GLOBAL
                    id: "SlackToken"
                    secret: "${slack_token}"
                    description: "SlackToken"
                - usernamePassword:
                    scope: GLOBAL
                    id: "mongo_credentials_dev"
                    username: "user1"
                    description: "mongodb credentials for dev k8s cluster"
                    password: "${mongo_credentials_dev}"


  ingress:
    enabled: true
    paths: []
    apiVersion: "extensions/v1beta1"
    labels: {}
    annotations:
      kubernetes.io/tls-acme: "true" 
      kubernetes.io/ssl-redirect: "true" 
      kubernetes.io/ingress.class: "nginx" 
    hostName: jenkins.myftp.org
    tls:
      - secretName: acme-jenkins-app-tls
        hosts:
          - jenkins.myftp.org

persistence:
  enabled: true
  volumes:
    - name: jenkins-secrets
      secret:
        secretName: jenkins-secrets
  mounts:
    - name: jenkins-secrets
      mountPath: /secrets/jenkins
      readOnly: true

